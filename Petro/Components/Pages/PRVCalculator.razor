@page "/prv-calculator"
@using Petro.ViewModels
@inject IJSRuntime JSRuntime


<div class="calculator-page">
    <h3>PRV Calculator</h3>

    <div class="top-row">
        <div class="column">
            <div class="card">
                <h4>Input Parameters</h4>
                <div class="card-body">
                    <div class="mb-4">
                        <label for="maxPumpRate" class="modern-label">Max Pump Rate (gpm)</label>
                        <input type="number"
                               class="modern-input @(ViewModel.MaxPumpRate == 0 ? "default-value" : "")"
                               id="maxPumpRate"
                               @bind="ViewModel.MaxPumpRate"
                               placeholder="0" />
                    </div>

                    <div class="mb-4">
                        <label for="mudWeight" class="modern-label">Mud Weight (sg)</label>
                        <input type="number"
                               class="modern-input @(ViewModel.MudWeight == 0 ? "default-value" : "")"
                               id="mudWeight"
                               @bind="ViewModel.MudWeight"
                               placeholder="0" />
                    </div>

                    <div class="mb-4">
                        <label for="capacityCorrectionFactor" class="modern-label">Capacity Correction Factor (Kw)</label>
                        <input type="number"
                               class="modern-input @(ViewModel.CapacityCorrectionFactor == 0 ? "default-value" : "")"
                               id="capacityCorrectionFactor"
                               @bind="ViewModel.CapacityCorrectionFactor"
                               placeholder="0" />
                    </div>

                    <div class="mb-4">
                        <label for="coefficientOfDischarge" class="modern-label">Coefficient of Discharge (Kd)</label>
                        <input type="number"
                               class="modern-input @(ViewModel.CoefficientOfDischarge == 0 ? "default-value" : "")"
                               id="coefficientOfDischarge"
                               @bind="ViewModel.CoefficientOfDischarge"
                               placeholder="0" />
                    </div>

                    <div class="mb-4">
                        <label for="viscosityCorrectionFactor" class="modern-label">Viscosity Correction Factor (Kv)</label>
                        <input type="number"
                               class="modern-input @(ViewModel.ViscosityCorrectionFactor == 0 ? "default-value" : "")"
                               id="viscosityCorrectionFactor"
                               @bind="ViewModel.ViscosityCorrectionFactor"
                               placeholder="0" />
                    </div>

                    <div class="mb-4">
                        <label for="prvSetting" class="modern-label">PRV Setting (Set Point)</label>
                        <input type="number"
                               class="modern-input @(ViewModel.PrvSetting == 0 ? "default-value" : "")"
                               id="prvSetting"
                               @bind="ViewModel.PrvSetting"
                               placeholder="0" />
                    </div>

                    <div class="mb-4">
                        <label for="maxHydrostaticBackpressure" class="modern-label">Max Hydrostatic Backpressure (P2)</label>
                        <input type="number"
                               class="modern-input @(ViewModel.MaxHydrostaticBackpressure == 0 ? "default-value" : "")"
                               id="maxHydrostaticBackpressure"
                               @bind="ViewModel.MaxHydrostaticBackpressure"
                               placeholder="0" />
                    </div>

                    <div class="mb-4">

                    <button class="btn-calculate" @onclick="ViewModel.CalculateRequiredArea">Calculate</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Results -->
        <br />
        <div class="column">
            <div class="card">
                <h4>Results</h4>
                <div class="card-body">
                    <div class="alert @(ViewModel.HasError ? "alert-danger" : "alert-info")">
                        @if (ViewModel.HasError)
                        {
                            <span>@ViewModel.ErrorMessage</span>
                        }
                        else if (ViewModel.CalculationPerformed)
                        {
                            <div>
                                <h5>Required Area: @ViewModel.RequiredArea.ToString("F6") square inches</h5>
                                <p>Over Pressure PRV (P1): @ViewModel.OverPressurePrv</p>
                            </div>
                        }
                        else
                        {
                            <span>Enter values and click Calculate to see results.</span>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Bottom section with formula spanning full width -->
    </div>
    <div class="bottom-section">
            <!-- Formula Display -->
            <div class="formula-container text-center my-4">
                <div style="font-size: 1.5rem;">
                    \[A = \frac{Q}{38K_dK_wK_v} \sqrt{\frac{G}{p_1-p_2}}\]
                </div>
            </div>
            <!-- Formula Display -->
            <div class="card">
                <div class="card-header">Formula Used</div>
                <div class="card-body">
                    <p>Where:</p>
                    <ul>
                        <li>𝐴: Required discharge area (in²)</li>
                        <li>𝑄: Flow rate (gpm)</li>
                        <li>𝐾𝑑: Coefficient of discharge (dimensionless)</li>
                        <li>𝐾𝑤: Capacity correction factor (dimensionless)</li>
                        <li>𝐾𝑣: Viscosity correction factor (dimensionless)</li>
                        <li>𝐺: Specific gravity of the fluid (sg)</li>
                        <li>𝑃1​: Set pressure plus overpressure (psi)</li>
                        <li>𝑃2: Backpressure (psi)</li>
                    </ul>
                </div>
            </div>
        </div>
</div>

@code {
    private PRVCalculationViewModel ViewModel { get; set; } = new PRVCalculationViewModel();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
            if (typeof window.MathJax === 'undefined') {
                // MathJax config
                window.MathJax = {
                    tex: {
                        inlineMath: [['$', '$']],
                        displayMath: [['\\\\[', '\\\\]']]
                    },
                    svg: {
                        fontCache: 'global'
                    }
                };

                // Load MathJax
                var script = document.createElement('script');
                script.src = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js';
                script.id = 'MathJax-script';
                script.async = true;

                script.onload = function() {
                    MathJax.typeset();
                };

                document.head.appendChild(script);
            } else {
                MathJax.typeset();
            }
        ");

            // Code to match button width to inputs
            await JSRuntime.InvokeVoidAsync("eval", @"
            // Wait a brief moment to ensure DOM is fully rendered
            setTimeout(function() {
                const inputWidth = document.querySelector('.modern-input').offsetWidth;
                document.querySelector('.btn-calculate').style.width = inputWidth + 'px';
            }, 100);
        ");
        }
    }
}
