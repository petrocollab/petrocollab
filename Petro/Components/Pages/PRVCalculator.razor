@page "/prv-calculator"
@using Petro.ViewModels
@inject PRVCalculationViewModel ViewModel
@using Petro.Components.Elements.PRVCalculation
@inject IJSRuntime JSRuntime

<div class="calculator-page">
    <h3>@ViewModel.StringResources.PageTitle</h3>

    <div class="top-row">
        <!-- First Column: Inputs & Settings -->
        <div class="column">
            <!-- Input Parameters -->
            <h4>@ViewModel.StringResources.InputParameters.Title</h4>
            <!--Placeholder for Demo button-->
            <div class="input-row">
                <div class="column">
                    <!--Inputs first column-->
                    <div class="card-body">
                        <div class="mb-4">
                            <label for="availableArea" class="modern-label">@ViewModel.StringResources.InputParameters.AvailableArea</label>
                            <input type="number"
                            class="modern-input @(ViewModel.AvailableArea == 0 ? "default-value" : "")"
                            id="availableArea"
                            @bind="ViewModel.AvailableArea" />
                        </div>

                        @if (ViewModel.CalculationMode == "single")
                        {
                            <div class="mb-4">
                                <label for="flowRate" class="modern-label">@ViewModel.StringResources.InputParameters.FlowRate<span class="required-field">*</span></label>
                                <input type="number"
                                class="modern-input @(ViewModel.FlowRate == 0 ? "default-value" : "")"
                                id="flowRate"
                                @bind="ViewModel.FlowRate" />
                            </div>
                        } else
                        {
                            <div class="mb-4">
                                <label for="minFlowRate" class="modern-label">@ViewModel.StringResources.InputParameters.MinFlowRate<span class="required-field">*</span></label>
                                <input type="number"
                                       class="modern-input @(ViewModel.MinFlowRate == 0 ? "default-value" : "")"
                                       id="minFlowRate"
                                       @bind="ViewModel.MinFlowRate" />
                            </div>
                            <div class="mb-4">
                                <label for="maxFlowRate" class="modern-label">@ViewModel.StringResources.InputParameters.MaxFlowRate<span class="required-field">*</span></label>
                                <input type="number"
                                       class="modern-input @(ViewModel.MaxFlowRate == 0 ? "default-value" : "")"
                                       id="maxFlowRate"
                                       @bind="ViewModel.MaxFlowRate" />
                            </div>
                        }

                        <MudWeightInputs ViewModel="ViewModel" />

                        <div class="mb-4">
                            <label for="prvSetting" class="modern-label">@ViewModel.StringResources.InputParameters.PrvSetting<span class="required-field">*</span></label>
                            <input type="number"
                                   class="modern-input @(ViewModel.PrvSetting == 0 ? "default-value" : "")"
                                   id="prvSetting"
                                   @bind="ViewModel.PrvSetting" />
                        </div>
                    </div>
                </div>
                <div class="column">
                    <!--Inputs second column-->
                    <div class="card-body">
                        <div class="mb-4">
                            <label for="capacityCorrectionFactor" class="modern-label">@ViewModel.StringResources.InputParameters.CapacityCorrectionFactor<span class="required-field">*</span></label>
                            <input type="number"
                                   class="modern-input @(ViewModel.CapacityCorrectionFactor == 0 ? "default-value" : "")"
                                   id="capacityCorrectionFactor"
                                   @bind="ViewModel.CapacityCorrectionFactor"
                                   placeholder="0" />
                        </div>
                        <div class="mb-4">
                            <label for="coefficientOfDischarge" class="modern-label">@ViewModel.StringResources.InputParameters.CoefficientOfDischarge<span class="required-field">*</span></label>
                            <input type="number"
                                   class="modern-input @(ViewModel.CoefficientOfDischarge == 0 ? "default-value" : "")"
                                   id="coefficientOfDischarge"
                                   @bind="ViewModel.CoefficientOfDischarge"
                                   placeholder="0" />
                        </div>
                        <div class="mb-4">
                            <label for="combinationCorrectionFactor" class="modern-label">@ViewModel.StringResources.InputParameters.CombinationCorrectionFactor<span class="required-field">*</span></label>
                            <input type="number"
                                   class="modern-input @(ViewModel.CombinationCorrectionFactor == 0 ? "default-value" : "")"
                                   id="combinationCorrectionFactor"
                                   @bind="ViewModel.CombinationCorrectionFactor"
                                   placeholder="0" />
                        </div>

                        <div class="mb-4">
                            <label for="absoluteViscosity" class="modern-label">@ViewModel.StringResources.InputParameters.AbsoluteViscosity</label>
                            <input type="number"
                                   class="modern-input @(ViewModel.AbsoluteViscosity == 0 ? "default-value" : "")"
                                   id="absoluteViscosity"
                                   @bind="ViewModel.AbsoluteViscosity" />
                        </div>
                        <div class="mb-4">
                            <label for="maxHydrostaticBackpressure" class="modern-label">@ViewModel.StringResources.InputParameters.MaxHydrostaticBackpressure</label>
                            <input type="number"
                                   class="modern-input @(ViewModel.MaxHydrostaticBackpressure == 0 ? "default-value" : "")"
                                   id="maxHydrostaticBackpressure"
                                   @bind="ViewModel.MaxHydrostaticBackpressure" />
                        </div>
                        
                    </div>
                </div>
            </div>

            <!-- Settings -->
            <div class="card">
                <div class="card-body">
                    <h4>@ViewModel.StringResources.InputParameters.AdvancedOptions</h4>
                    <div class="settings-row">
                        <!-- Settings: First Column -->
                        <div class="settings-column">
                            <h5>@ViewModel.StringResources.InputParameters.CalculationMode</h5>

                            <div class="radio-group mb-4">
                                <div class="radio-option">
                                    <input type="radio"
                                           id="singleScenario"
                                           name="calculationMode"
                                           value="single"
                                           checked="@(ViewModel.CalculationMode == "single")"
                                           @onchange="@(() => ViewModel.CalculationMode = "single")" />
                                    <label for="singleScenario" class="radio-label">
                                        <span class="radio-title">@ViewModel.StringResources.InputParameters.SingleScenarioTitle</span>
                                        <p class="radio-description">@ViewModel.StringResources.InputParameters.SingleScenarioDescr</p>
                                    </label>
                                </div>
                            </div>

                            <div class="radio-group mb-4">
                                <div class="radio-option">
                                    <input type="radio"
                                           id="multipleScenario"
                                           name="calculationMode"
                                           value="multiple"
                                           checked="@(ViewModel.CalculationMode == "multiple")"
                                           @onchange="@(() => ViewModel.CalculationMode = "multiple")" />
                                    <label for="multipleScenario" class="radio-label">
                                        <span class="radio-title">@ViewModel.StringResources.InputParameters.MultipleScenarioTitle</span>
                                        <p class="radio-description">@ViewModel.StringResources.InputParameters.MultipleScenarioDescr</p>
                                    </label>
                                </div>
                            </div>
                        </div>
                        <!-- Settings: Second Column -->
                        <div class="settings-column">
                            <h5>@ViewModel.StringResources.InputParameters.PRVCertReqTitle</h5>

                            <div class="radio-group mb-4">
                                <div class="radio-option radio-option-centered">
                                    <input type="radio"
                                           id="prvCertTrue"
                                           name="prvCertification"
                                           value="true"
                                           checked="@(ViewModel.PRVCertificationRequired == true)"
                                           @onchange="@(() => ViewModel.PRVCertificationRequired = true)" />
                                    <label for="prvCertTrue" class="radio-label">
                                        <span class="radio-title">@ViewModel.StringResources.InputParameters.PRVCertReqTrue</span>
                                    </label>
                                </div>
                            </div>

                            <div class="radio-group mb-4">
                                <div class="radio-option radio-option-centered">
                                    <input type="radio"
                                           id="prvCertFalse"
                                           name="prvCertification"
                                           value="false"
                                           checked="@(ViewModel.PRVCertificationRequired == false)"
                                           @onchange="@(() => ViewModel.PRVCertificationRequired = false)" />
                                    <label for="prvCertFalse" class="radio-label">
                                        <span class="radio-title">@ViewModel.StringResources.InputParameters.PRVCertReqFalse</span>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <!-- Second Column: Buttons & Results -->
        <br />
        <div class="column">
            <div class="card">
                <!-- Buttons -->
                <div class="button-group">
                    <button class="btn-calculate"
                            @onclick="ViewModel.CalculateRequiredArea">
                        @ViewModel.StringResources.InputParameters.CalculateButton
                    </button>

                    <button class="btn-clear @(ViewModel.CurrentClearButtonState == ClearButtonState.ConfirmReset ? "confirm-reset" : "icon")"
                            @onclick="ViewModel.HandleClearButtonClick">
                        @if (ViewModel.ShowClearIcon)
                        {
                            <div class="btn-clear-icon"></div>
                        }
                        @if (ViewModel.ShowClearText)
                        {
                            @ViewModel.ClearButtonText
                        }
                    </button>
                </div>


                <!-- Results -->
                <h4>@ViewModel.StringResources.Results.Title</h4>
                <div class="card-body">
                    @if (ViewModel.CalculationPerformed)
                    {
                        @if (ViewModel.Reynolds != string.Empty)
                        {
                            <h5>@ViewModel.Reynolds</h5>
                        }

                        <h5>
                            @ViewModel.StringResources.Results.RequiredAreaPrefix
                            @ViewModel.RequiredArea.ToString("F2")
                            @ViewModel.StringResources.Results.RequiredAreaSuffix
                        </h5>

                        @if (ViewModel.HasAreaComparison)
                        {
                            <div class="alert @(ViewModel.IsAreaAdequate ? "alert-success" : "alert-warning") mt-3">
                                <div class="alert-icon"></div>
                                <div class="alert-content">
                                    <p>@ViewModel.AreaComparisonMessage</p>
                                </div>
                            </div>
                        }
                    }
                    else 
                    {
                        <div class="alert @(ViewModel.HasError ? "alert-error" : "alert-info")">
                            <div class="alert-icon"></div>
                            <div class="alert-content">
                                @if (ViewModel.HasError)
                                {
                                    <span>@ViewModel.ErrorMessage</span>
                                }
                                else
                                {
                                    <span>@ViewModel.StringResources.Results.DefaultMessage</span>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Formula Display -->
    <div class="bottom-section">
        <div class="formula-container text-center my-4">
            <div style="font-size: 1.5rem;">
                @((MarkupString)ViewModel.StringResources.Formula.FormulaLatex)
            </div>
        </div>
        <!-- Formula Display -->
        <div class="card">
            <div class="card-header">@ViewModel.StringResources.Formula.Title</div>
            <div class="card-body">
                <p>@ViewModel.StringResources.Formula.Description</p>
                <ul>
                    <li>@ViewModel.StringResources.Formula.Variables.Area</li>
                    <li>@ViewModel.StringResources.Formula.Variables.FlowRate</li>
                    <li>@ViewModel.StringResources.Formula.Variables.CoefficientOfDischarge</li>
                    <li>@ViewModel.StringResources.Formula.Variables.CapacityCorrectionFactor</li>
                    <li>@ViewModel.StringResources.Formula.Variables.CombinationCorrectionFactor</li>
                    <li>@ViewModel.StringResources.Formula.Variables.ViscosityCorrectionFactor</li>
                    <li>@ViewModel.StringResources.Formula.Variables.AbsoluteViscosity</li>
                    <li>@ViewModel.StringResources.Formula.Variables.SpecificGravity</li>
                    <li>@ViewModel.StringResources.Formula.Variables.SetPressure</li>
                    <li>@ViewModel.StringResources.Formula.Variables.Backpressure</li>
                </ul>
            </div>
        </div>
    </div>
</div>

@code {
    // private PRVCalculationViewModel ViewModel { get; set; } = new PRVCalculationViewModel();
    protected override async Task OnInitializedAsync() {
        await ViewModel.LoadResourcesAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", "if (typeof MathJax !== 'undefined') { MathJax.typeset(); }");
        }
    }
}
