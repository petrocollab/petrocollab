@page "/prv-calculator"
@using Petro.ViewModels
@inject PRVCalculationViewModel ViewModel
@using Petro.Components.Elements.PRVCalculation
@inject IJSRuntime JSRuntime

<div class="calculator-page">
    <h3>@ViewModel.StringResources.PageTitle</h3>

    <div class="top-row">
        <div class="column">
            <div class="card">
                <h4>@ViewModel.StringResources.InputParameters.Title</h4>
                <div class="card-body">
                    <div class="mb-4">
                        <label for="availableArea" class="modern-label">@ViewModel.StringResources.InputParameters.AvailableArea</label>
                        <input type="number"
                               class="modern-input @(ViewModel.AvailableArea == 0 ? "default-value" : "")"
                               id="availableArea"
                               @bind="ViewModel.AvailableArea" />
                    </div>

                    <div class="mb-4">
                        <label for="maxPumpRate" class="modern-label">@ViewModel.StringResources.InputParameters.MaxPumpRate</label>
                        <input type="number"
                        class="modern-input @(ViewModel.MaxPumpRate == 0 ? "default-value" : "")"
                        id="maxPumpRate"
                        @bind="ViewModel.MaxPumpRate"
                        />
                    </div>

                    <MudWeightInputs ViewModel="ViewModel" />

                    <div class="mb-4">
                        <label for="prvSetting" class="modern-label">@ViewModel.StringResources.InputParameters.PrvSetting</label>
                        <input type="number"
                               class="modern-input @(ViewModel.PrvSetting == 0 ? "default-value" : "")"
                               id="prvSetting"
                               @bind="ViewModel.PrvSetting" />
                    </div>

                    <div class="mb-4">
                        <label for="maxHydrostaticBackpressure" class="modern-label">@ViewModel.StringResources.InputParameters.MaxHydrostaticBackpressure</label>
                        <input type="number"
                               class="modern-input @(ViewModel.MaxHydrostaticBackpressure == 0 ? "default-value" : "")"
                               id="maxHydrostaticBackpressure"
                               @bind="ViewModel.MaxHydrostaticBackpressure" />
                    </div>

                    <div class="mb-4">
                        <label for="capacityCorrectionFactor" class="modern-label">@ViewModel.StringResources.InputParameters.CapacityCorrectionFactor</label>
                        <input type="number"
                        class="modern-input @(ViewModel.CapacityCorrectionFactor == 0 ? "default-value" : "")"
                        id="capacityCorrectionFactor"
                        @bind="ViewModel.CapacityCorrectionFactor"
                        placeholder="0" />
                    </div>

                    <div class="mb-4">
                        <label for="coefficientOfDischarge" class="modern-label">@ViewModel.StringResources.InputParameters.CoefficientOfDischarge</label>
                        <input type="number"
                        class="modern-input @(ViewModel.CoefficientOfDischarge == 0 ? "default-value" : "")"
                        id="coefficientOfDischarge"
                        @bind="ViewModel.CoefficientOfDischarge"
                        placeholder="0" />
                    </div>

                    <div class="mb-4">
                        <label for="combinationCorrectionFactor" class="modern-label">@ViewModel.StringResources.InputParameters.CombinationCorrectionFactor</label>
                        <input type="number"
                               class="modern-input @(ViewModel.CombinationCorrectionFactor == 0 ? "default-value" : "")"
                               id="combinationCorrectionFactor"
                               @bind="ViewModel.CombinationCorrectionFactor"
                        placeholder="0" />
                    </div>

                    <div class="mb-4">
                        <button class="btn-calculate" 
                        @onclick="ViewModel.CalculateRequiredArea">
                        @ViewModel.StringResources.InputParameters.CalculateButton</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Results -->
        <br />
        <div class="column">
            <div class="card">
                <h4>@ViewModel.StringResources.Results.Title</h4>
                <div class="card-body">
                    <div class="alert @(ViewModel.HasError ? "alert-danger" : "alert-info")">
                        @if (ViewModel.HasError)
                        {
                            <span>@ViewModel.ErrorMessage</span>
                        }
                        else if (ViewModel.CalculationPerformed)
                        {
                            <div>
                                <!-- TODO: Add comparison-->
                                <h5>@ViewModel.StringResources.Results.RequiredAreaPrefix @ViewModel.RequiredArea.ToString("F2") @ViewModel.StringResources.Results.RequiredAreaSuffix</h5>
                            </div>
                        }
                        else
                        {
                            <span>@ViewModel.StringResources.Results.DefaultMessage</span>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Bottom section with formula spanning full width -->
    </div>
    <div class="bottom-section">
        <!-- Formula Display -->
        <div class="formula-container text-center my-4">
            <div style="font-size: 1.5rem;">
                @((MarkupString)ViewModel.StringResources.Formula.FormulaLatex)
            </div>
        </div>
        <!-- Formula Display -->
        <div class="card">
            <div class="card-header">@ViewModel.StringResources.Formula.Title</div>
            <div class="card-body">
                <p>@ViewModel.StringResources.Formula.Description</p>
                <ul>
                    <li>@ViewModel.StringResources.Formula.Variables.Area</li>
                    <li>@ViewModel.StringResources.Formula.Variables.FlowRate</li>
                    <li>@ViewModel.StringResources.Formula.Variables.CoefficientOfDischarge</li>
                    <li>@ViewModel.StringResources.Formula.Variables.CapacityCorrectionFactor</li>
                    <li>@ViewModel.StringResources.Formula.Variables.CombinationCorrectionFactor</li>
                    <li>@ViewModel.StringResources.Formula.Variables.ViscosityCorrectionFactor</li>
                    <li>@ViewModel.StringResources.Formula.Variables.SpecificGravity</li>
                    <li>@ViewModel.StringResources.Formula.Variables.SetPressure</li>
                    <li>@ViewModel.StringResources.Formula.Variables.Backpressure</li>
                </ul>
            </div>
        </div>
    </div>
</div>

@code {
    // private PRVCalculationViewModel ViewModel { get; set; } = new PRVCalculationViewModel();
    protected override async Task OnInitializedAsync() {
        await ViewModel.LoadResourcesAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
            if (typeof window.MathJax === 'undefined') {
                // MathJax config
                window.MathJax = {
                    tex: {
                        inlineMath: [['$', '$']],
                        displayMath: [['\\\\[', '\\\\]']]
                    },
                    svg: {
                        fontCache: 'global'
                    }
                };

                // Load MathJax
                var script = document.createElement('script');
                script.src = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js';
                script.id = 'MathJax-script';
                script.async = true;

                script.onload = function() {
                    MathJax.typeset();
                };

                document.head.appendChild(script);
            } else {
                MathJax.typeset();
            }
        ");

            // Code to match button width to inputs
            await JSRuntime.InvokeVoidAsync("eval", @"
            // Wait a brief moment to ensure DOM is fully rendered
            setTimeout(function() {
                const inputWidth = document.querySelector('.modern-input').offsetWidth;
                document.querySelector('.btn-calculate').style.width = inputWidth + 'px';
            }, 100);
        ");
        }
    }
}
